#! /usr/bin/env python

PACKAGE='airlab_segment'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name                                  Type         Lvl  Description                                                            Default, Min, Max
pre_filtering = gen.add_group("Passthrough Prefiltering")
pre_filtering.add("passthrough_min_depth", double_t, 0, "The lower limit of passthrough depth pre-filter in metres", 0.3,   0.0,   5.0)
pre_filtering.add("passthrough_max_depth", double_t, 0, "The upper limit of passthrough depth pre-filter in metres", 1.5,   0.0,   5.0)

mps = gen.add_group("Multiplane Segmentation")
mps.add("plane_min_inliers", int_t, 0, "Minimum number of points for counting a segment as a plane to exclude", 10000,   500, 50000)

euclidean = gen.add_group("Euclidean Clustering")
euclidean.add("cluster_distance_threshold", double_t,    0,   "Maximum distance for including a outlier point in a euclidean segment",  0.02, 0.001,  0.04)
euclidean.add("cluster_min_inliers",        int_t,       0,   "Minimum number of points of a segment to be published",                   200,    10,  5000)
euclidean.add("cluster_max_inliers",        int_t,       0,   "Minimum number of points of a segment to be published",                 15000,   100, 20000)

reg_grow = gen.add_group("Region Growing Segmentation")
reg_grow.add("region_growing_min_inliers",            int_t,    0,   "The minimum number of a segment for region growing segmentation",          30,    10,  5000)
reg_grow.add("region_growing_point_color_threshold",  int_t,    0,   "The maximum color distance for including a point into a region",           25,     1,   128)
reg_grow.add("region_growing_region_color_threshold", int_t,    0,   "The maximum color distance for merging a region with another",             40,     1,   128)
reg_grow.add("region_growing_distance_threshold",     double_t, 0,   "The max distance threshold for including a point to a grown region",     0.02, 0.001,  0.04)

post_filtering = gen.add_group("Segment Location Postfiltering")
post_filtering.add("post_filtering_min_point_x", double_t, 0, "x component of segment location post-filtering starting point", -2, -3, 3)
post_filtering.add("post_filtering_min_point_y", double_t, 0, "y component of segment location post-filtering starting point", -2, -3, 3)
post_filtering.add("post_filtering_min_point_z", double_t, 0, "z component of segment location post-filtering starting point", -2, -3, 3)
post_filtering.add("post_filtering_max_point_x", double_t, 0, "x component of segment location post-filtering ending point",    2, -3, 3)
post_filtering.add("post_filtering_max_point_y", double_t, 0, "y component of segment location post-filtering ending point",    2, -3, 3)
post_filtering.add("post_filtering_max_point_z", double_t, 0, "z component of segment location post-filtering ending point",    2, -3, 3)
post_filtering.add("post_filtering_single_axis_intersection_allowance", double_t, 0, "Maximum excess space that is counted in one axis of a region", 0.005, 0, 0.15)
post_filtering.add("post_filtering_volume_intersection_threshold", double_t, 0, "Minimum volumetric intersection with region of interest", 0.1, 0.00001, 1)

exit(gen.generate(PACKAGE, "airlab_segment", "SegmentParams"))
